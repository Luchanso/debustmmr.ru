{"version":3,"sources":["Landing.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["validateEmail","email","test","String","toLowerCase","Landing","useState","isEmailEntered","emailSend","setEmail","className","Button","variant","component","RouterLink","to","color","TextField","id","label","fullWidth","onChange","value","target","onClick","disabled","Link","href","Login","error","setError","type","Typography","theme","createMuiTheme","palette","primary","red","secondary","gray","App","ThemeProvider","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0VAIA,SAASA,EAAcC,GAErB,MADW,0JACDC,KAAKC,OAAOF,GAAOG,eAGxB,SAASC,IAAW,IAAD,EACYC,oBAAS,GADrB,mBACjBC,EADiB,KACDC,EADC,OAEEF,mBAAS,IAFX,mBAEjBL,EAFiB,KAEVQ,EAFU,KAIxB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,SACb,kBAACC,EAAA,EAAD,CACEC,QAAQ,WACRC,UAAWC,IACXC,GAAG,SACHC,MAAM,WAJR,mCASF,4BAAQN,UAAU,cAChB,wBAAIA,UAAU,SACZ,0BAAMA,UAAU,QAAhB,4BADF,OAC0C,2DACxC,0BAAMA,UAAU,SAAhB,mBAEF,yBAAKA,UAAU,WACb,2MAEE,6BAFF,kNAIE,6BAJF,wMAOEH,GACA,oCACE,uBAAGG,UAAU,WAAb,4PAGA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,SACb,kBAACO,EAAA,EAAD,CACEC,GAAG,QACHC,MAAM,QACNP,QAAQ,SACRI,MAAM,YACNI,WAAS,EACTC,SAAU,gBAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2Bb,EAASa,OAGlD,kBAACX,EAAA,EAAD,CACED,UAAU,UACVE,QAAQ,WACRI,MAAM,UACNQ,QAAS,WACPhB,GAAU,IAEZiB,UAAWzB,EAAcC,IAP3B,2DAYF,yBAAKS,UAAU,WAAf,iMACsC,IACpC,kBAACgB,EAAA,EAAD,CAAMC,KAAK,cAAcX,MAAM,gBAAgBO,OAAO,UAAtD,iOAMLhB,GACC,4MAEE,6BAFF,2LAIE,6BACA,0BAAMG,UAAU,gBAAgBT,O,kBC7EvC,SAAS2B,IAAS,IAAD,EACItB,oBAAS,GADb,mBACfuB,EADe,KACRC,EADQ,KAGtB,OACE,yBAAKpB,UAAU,aACb,kBAACO,EAAA,EAAD,CACEY,MAAOA,EACPjB,QAAQ,SACRI,MAAM,UACNE,GAAG,QACHC,MAAM,mCAER,6BACA,kBAACF,EAAA,EAAD,CACEL,QAAQ,SACRI,MAAM,UACNE,GAAG,WACHC,MAAM,uCACNY,KAAK,WACLF,MAAOA,IAERA,GACC,oCACE,6BACA,kBAACG,EAAA,EAAD,CAAYpB,QAAQ,UAAUI,MAAM,WAApC,oKAKJ,6BACA,kBAACL,EAAA,EAAD,CACEC,QAAQ,WACRI,MAAM,UACNN,UAAU,iBACVc,QAAS,kBAAMM,GAAS,KAJ1B,kCAQA,yBAAKpB,UAAU,WAAf,YC5BN,IAAMuB,EAAQC,YAAe,CAC3BC,QAAS,CACPJ,KAAM,OACNK,QAASC,IACTC,UAAWC,OAqBAC,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAeR,MAAOA,GACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,KAAK,UACV,kBAACd,EAAD,OAEF,kBAAC,IAAD,CAAOc,KAAK,KACV,kBAACrC,EAAD,WClBQsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,c","file":"static/js/main.b2350584.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, TextField, Link } from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nfunction validateEmail(email) {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nexport function Landing() {\n  const [isEmailEntered, emailSend] = useState(false);\n  const [email, setEmail] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <div className=\"Login\">\n        <Button\n          variant=\"outlined\"\n          component={RouterLink}\n          to=\"/login\"\n          color=\"primary\"\n        >\n          Войти\n        </Button>\n      </div>\n      <header className=\"App-header\">\n        <h1 className=\"Title\">\n          <span className=\"Sliv\">Слив</span>&nbsp;<span>ММР Dota 2</span>\n          <span className=\"Alpha\">α version</span>\n        </h1>\n        <div className=\"Content\">\n          <p>\n            Дебуст аккаунтов 200 руб за каждые 1000 MMR\n            <br />\n            Для тех, кто хочет играть под пиво и чипсы\n            <br />\n            Продажа и покупка аккаунтов с низким MMR\n          </p>\n          {!isEmailEntered && (\n            <>\n              <p className=\"Pre-reg\">\n                Пре-регистрация для участия в бета и альфа тесте\n              </p>\n              <div className=\"Send\">\n                <div className=\"Email\">\n                  <TextField\n                    id=\"email\"\n                    label=\"Email\"\n                    variant=\"filled\"\n                    color=\"secondary\"\n                    fullWidth\n                    onChange={({ target: { value } }) => setEmail(value)}\n                  />\n                </div>\n                <Button\n                  className=\"SendBtn\"\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => {\n                    emailSend(true);\n                  }}\n                  disabled={!validateEmail(email)}\n                >\n                  Отправить\n                </Button>\n              </div>\n              <div className=\"Privacy\">\n                Нажимая отправить вы соглашаетесь с{\" \"}\n                <Link href=\"/privacy.md\" color=\"textSecondary\" target=\"_blank\">\n                  политикой обработки персональных данных\n                </Link>\n              </div>\n            </>\n          )}\n          {isEmailEntered && (\n            <>\n              Спасибо за проявленный интерес\n              <br />\n              Анонс открытия будет отправлен на email\n              <br />\n              <span className=\"Email-finish\">{email}</span>\n            </>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { TextField, Button, Typography } from \"@material-ui/core\";\n\nexport function Login() {\n  const [error, setError] = useState(false);\n\n  return (\n    <div className=\"LoginPage\">\n      <TextField\n        error={error}\n        variant=\"filled\"\n        color=\"primary\"\n        id=\"login\"\n        label=\"Логин\"\n      />\n      <br />\n      <TextField\n        variant=\"filled\"\n        color=\"primary\"\n        id=\"password\"\n        label=\"Пароль\"\n        type=\"password\"\n        error={error}\n      />\n      {error && (\n        <>\n          <br />\n          <Typography variant=\"caption\" color=\"primary\">\n            Неправильный логин или пароль\n          </Typography>\n        </>\n      )}\n      <br />\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        className=\"LoginPageLogin\"\n        onClick={() => setError(true)}\n      >\n        Войти\n      </Button>\n      <div className=\"Version\">v0.23.1</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport red from \"@material-ui/core/colors/red\";\nimport gray from \"@material-ui/core/colors/teal\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Landing } from \"./Landing\";\nimport \"./App.css\";\nimport { Login } from \"./Login\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: red,\n    secondary: gray,\n  },\n});\n\nfunction App() {\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}